<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Projects/Bootstrap.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/Bootstrap.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;public class Bootstrap : MonoBehaviour&#10;{&#10;    private static Bootstrap _instance;&#10;&#10;    public static Bootstrap Instance&#10;    {&#10;        get&#10;        {&#10;            if (_instance == null)&#10;            {&#10;                GameObject bootstrapObject = new GameObject(&quot;Bootstrap&quot;);&#10;                _instance = bootstrapObject.AddComponent&lt;Bootstrap&gt;();&#10;                DontDestroyOnLoad(bootstrapObject);&#10;            }&#10;            return _instance;&#10;        }&#10;    }&#10;&#10;    private void Awake()&#10;    {&#10;        if (_instance != null &amp;&amp; _instance != this)&#10;        {&#10;            Destroy(gameObject);&#10;            return;&#10;        }&#10;&#10;        _instance = this;&#10;        DontDestroyOnLoad(gameObject);&#10;&#10;        InitializeComponents();&#10;    }&#10;&#10;    private void InitializeComponents()&#10;    {&#10;        // Example of initializing and passing components&#10;        GameManager gameManager = new GameObject(&quot;GameManager&quot;).AddComponent&lt;GameManager&gt;();&#10;        InputManager inputManager = new GameObject(&quot;InputManager&quot;).AddComponent&lt;InputManager&gt;();&#10;        PetStats petStats = new GameObject(&quot;PetStats&quot;).AddComponent&lt;PetStats&gt;();&#10;        TimeManager timeManager = new GameObject(&quot;TimeManager&quot;).AddComponent&lt;TimeManager&gt;();&#10;&#10;        gameManager.Initialize(inputManager, petStats);&#10;        petStats.Initialize(timeManager);&#10;    }&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;public class Bootstrap : MonoBehaviour&#10;{&#10;    private static Bootstrap _instance;&#10;&#10;    public static Bootstrap Instance&#10;    {&#10;        get&#10;        {&#10;            if (_instance == null)&#10;            {&#10;                GameObject bootstrapObject = new GameObject(&quot;Bootstrap&quot;);&#10;                _instance = bootstrapObject.AddComponent&lt;Bootstrap&gt;();&#10;                DontDestroyOnLoad(bootstrapObject);&#10;            }&#10;            return _instance;&#10;        }&#10;    }&#10;&#10;    [SerializeField] private GameManager gameManager;&#10;    [SerializeField] private InputManager inputManager;&#10;    [SerializeField] private PetStats petStats;&#10;    [SerializeField] private TimeManager timeManager;&#10;    [SerializeField] private Inventory inventory;&#10;    [SerializeField] private InventoryUI inventoryUI;&#10;&#10;    private void Awake()&#10;    {&#10;        if (_instance != null &amp;&amp; _instance != this)&#10;        {&#10;            Destroy(gameObject);&#10;            return;&#10;        }&#10;&#10;        _instance = this;&#10;        DontDestroyOnLoad(gameObject);&#10;&#10;        InitializeComponents();&#10;    }&#10;&#10;    private void InitializeComponents()&#10;    {&#10;        if (gameManager == null || inputManager == null || petStats == null || timeManager == null || inventory == null || inventoryUI == null)&#10;        {&#10;            Debug.LogError(&quot;One or more components are not assigned in the inspector.&quot;);&#10;            return;&#10;        }&#10;&#10;        gameManager.Initialize(inputManager, petStats);&#10;        petStats.Initialize(timeManager);&#10;        &#10;        // Инициализация UI инвентаря с необходимыми компонентами&#10;        if (inventoryUI != null)&#10;        {&#10;            // InventoryUI сам найдет компоненты через SerializeField, но можно добавить проверку&#10;            Debug.Log(&quot;Inventory system initialized.&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Projects/Inventory.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/Inventory.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using System.Collections.Generic;&#10;using System;&#10;&#10;public class Inventory : MonoBehaviour&#10;{&#10;    [Header(&quot;Inventory Settings&quot;)]&#10;    [SerializeField] private int inventorySize = 20;&#10;    [SerializeField] private InventorySlot[] slots;&#10;    &#10;    public static event Action&lt;InventorySlot[]&gt; OnInventoryChanged;&#10;    &#10;    private void Awake()&#10;    {&#10;        InitializeInventory();&#10;    }&#10;    &#10;    private void InitializeInventory()&#10;    {&#10;        slots = new InventorySlot[inventorySize];&#10;        for (int i = 0; i &lt; inventorySize; i++)&#10;        {&#10;            slots[i] = new InventorySlot();&#10;        }&#10;    }&#10;    &#10;    public bool AddItem(Item item, int quantity = 1)&#10;    {&#10;        if (item == null) return false;&#10;        &#10;        int remainingQuantity = quantity;&#10;        &#10;        // Сначала пытаемся добавить в существующие стаки&#10;        if (item.isStackable)&#10;        {&#10;            for (int i = 0; i &lt; slots.Length &amp;&amp; remainingQuantity &gt; 0; i++)&#10;            {&#10;                if (slots[i].CanAddItem(item))&#10;                {&#10;                    remainingQuantity = slots[i].AddItem(item, remainingQuantity);&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Затем создаем новые стаки в пустых слотах&#10;        for (int i = 0; i &lt; slots.Length &amp;&amp; remainingQuantity &gt; 0; i++)&#10;        {&#10;            if (slots[i].IsEmpty())&#10;            {&#10;                remainingQuantity = slots[i].AddItem(item, remainingQuantity);&#10;            }&#10;        }&#10;        &#10;        OnInventoryChanged?.Invoke(slots);&#10;        return remainingQuantity == 0;&#10;    }&#10;    &#10;    public bool RemoveItem(Item item, int quantity = 1)&#10;    {&#10;        if (item == null) return false;&#10;        &#10;        int remainingToRemove = quantity;&#10;        &#10;        for (int i = 0; i &lt; slots.Length &amp;&amp; remainingToRemove &gt; 0; i++)&#10;        {&#10;            if (slots[i].item == item)&#10;            {&#10;                int amountToRemove = Mathf.Min(remainingToRemove, slots[i].quantity);&#10;                slots[i].RemoveItem(amountToRemove);&#10;                remainingToRemove -= amountToRemove;&#10;            }&#10;        }&#10;        &#10;        OnInventoryChanged?.Invoke(slots);&#10;        return remainingToRemove == 0;&#10;    }&#10;    &#10;    public bool UseItem(int slotIndex, PetStats petStats)&#10;    {&#10;        if (slotIndex &lt; 0 || slotIndex &gt;= slots.Length) return false;&#10;        &#10;        InventorySlot slot = slots[slotIndex];&#10;        if (slot.IsEmpty()) return false;&#10;        &#10;        slot.item.UseItem(petStats);&#10;        slot.RemoveItem(1);&#10;        &#10;        OnInventoryChanged?.Invoke(slots);&#10;        return true;&#10;    }&#10;    &#10;    public int GetItemCount(Item item)&#10;    {&#10;        int count = 0;&#10;        for (int i = 0; i &lt; slots.Length; i++)&#10;        {&#10;            if (slots[i].item == item)&#10;            {&#10;                count += slots[i].quantity;&#10;            }&#10;        }&#10;        return count;&#10;    }&#10;    &#10;    public InventorySlot[] GetSlots()&#10;    {&#10;        return slots;&#10;    }&#10;    &#10;    public InventorySlot GetSlot(int index)&#10;    {&#10;        if (index &gt;= 0 &amp;&amp; index &lt; slots.Length)&#10;            return slots[index];&#10;        return null;&#10;    }&#10;    &#10;    public bool HasSpace()&#10;    {&#10;        for (int i = 0; i &lt; slots.Length; i++)&#10;        {&#10;            if (slots[i].IsEmpty()) return true;&#10;        }&#10;        return false;&#10;    }&#10;    &#10;    public void ClearInventory()&#10;    {&#10;        for (int i = 0; i &lt; slots.Length; i++)&#10;        {&#10;            slots[i].ClearSlot();&#10;        }&#10;        OnInventoryChanged?.Invoke(slots);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Projects/InventoryController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/InventoryController.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;public class InventoryController : MonoBehaviour&#10;{&#10;    [Header(&quot;Input Settings&quot;)]&#10;    [SerializeField] private KeyCode inventoryKey = KeyCode.I;&#10;    &#10;    [Header(&quot;References&quot;)]&#10;    [SerializeField] private InventoryUI inventoryUI;&#10;    &#10;    private void Update()&#10;    {&#10;        if (Input.GetKeyDown(inventoryKey))&#10;        {&#10;            if (inventoryUI != null)&#10;            {&#10;                inventoryUI.ToggleInventory();&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Публичные методы для добавления предметов (например, для тестирования или других систем)&#10;    public void AddTestItems()&#10;    {&#10;        if (inventoryUI != null)&#10;        {&#10;            // Эти методы можно использовать для тестирования после создания ScriptableObject предметов&#10;            Debug.Log(&quot;Добавьте предметы через ScriptableObject и вызовите inventoryUI.AddItem()&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Projects/InventorySlot.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/InventorySlot.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;[System.Serializable]&#10;public class InventorySlot&#10;{&#10;    public Item item;&#10;    public int quantity;&#10;&#10;    public InventorySlot()&#10;    {&#10;        item = null;&#10;        quantity = 0;&#10;    }&#10;&#10;    public InventorySlot(Item newItem, int newQuantity)&#10;    {&#10;        item = newItem;&#10;        quantity = newQuantity;&#10;    }&#10;&#10;    public bool IsEmpty()&#10;    {&#10;        return item == null || quantity &lt;= 0;&#10;    }&#10;&#10;    public bool CanAddItem(Item itemToAdd)&#10;    {&#10;        if (IsEmpty()) return true;&#10;        return item == itemToAdd &amp;&amp; item.isStackable &amp;&amp; quantity &lt; item.maxStackSize;&#10;    }&#10;&#10;    public int AddItem(Item itemToAdd, int quantityToAdd)&#10;    {&#10;        if (IsEmpty())&#10;        {&#10;            item = itemToAdd;&#10;            quantity = quantityToAdd;&#10;            return 0;&#10;        }&#10;&#10;        if (item == itemToAdd &amp;&amp; item.isStackable)&#10;        {&#10;            int spaceLeft = item.maxStackSize - quantity;&#10;            int amountToAdd = Mathf.Min(quantityToAdd, spaceLeft);&#10;            quantity += amountToAdd;&#10;            return quantityToAdd - amountToAdd;&#10;        }&#10;&#10;        return quantityToAdd;&#10;    }&#10;&#10;    public void RemoveItem(int quantityToRemove)&#10;    {&#10;        quantity -= quantityToRemove;&#10;        if (quantity &lt;= 0)&#10;        {&#10;            item = null;&#10;            quantity = 0;&#10;        }&#10;    }&#10;&#10;    public void ClearSlot()&#10;    {&#10;        item = null;&#10;        quantity = 0;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Projects/InventoryUI.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/InventoryUI.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;&#10;public class InventoryUI : MonoBehaviour&#10;{&#10;    [Header(&quot;UI References&quot;)]&#10;    [SerializeField] private Transform slotsParent;&#10;    [SerializeField] private GameObject slotPrefab;&#10;    [SerializeField] private Button closeButton;&#10;    &#10;    [Header(&quot;Components&quot;)]&#10;    [SerializeField] private Inventory inventory;&#10;    [SerializeField] private PetStats petStats;&#10;    &#10;    private ItemDisplay[] itemDisplays;&#10;    private bool isInitialized = false;&#10;    &#10;    private void Awake()&#10;    {&#10;        if (closeButton != null)&#10;        {&#10;            closeButton.onClick.AddListener(CloseInventory);&#10;        }&#10;    }&#10;    &#10;    private void OnEnable()&#10;    {&#10;        if (!isInitialized)&#10;        {&#10;            InitializeUI();&#10;        }&#10;        &#10;        Inventory.OnInventoryChanged += UpdateUI;&#10;        RefreshInventory();&#10;    }&#10;    &#10;    private void OnDisable()&#10;    {&#10;        Inventory.OnInventoryChanged -= UpdateUI;&#10;    }&#10;    &#10;    private void InitializeUI()&#10;    {&#10;        if (inventory == null)&#10;        {&#10;            Debug.LogError(&quot;Inventory не назначен в InventoryUI!&quot;);&#10;            return;&#10;        }&#10;        &#10;        InventorySlot[] slots = inventory.GetSlots();&#10;        itemDisplays = new ItemDisplay[slots.Length];&#10;        &#10;        // Создаем UI элементы для каждого слота&#10;        for (int i = 0; i &lt; slots.Length; i++)&#10;        {&#10;            GameObject slotObject;&#10;            &#10;            if (slotPrefab != null &amp;&amp; slotsParent != null)&#10;            {&#10;                slotObject = Instantiate(slotPrefab, slotsParent);&#10;            }&#10;            else&#10;            {&#10;                // Если префаб не назначен, создаем простой слот&#10;                slotObject = CreateSimpleSlot(i);&#10;            }&#10;            &#10;            ItemDisplay itemDisplay = slotObject.GetComponent&lt;ItemDisplay&gt;();&#10;            if (itemDisplay == null)&#10;            {&#10;                itemDisplay = slotObject.AddComponent&lt;ItemDisplay&gt;();&#10;            }&#10;            &#10;            itemDisplay.Initialize(this, i);&#10;            itemDisplays[i] = itemDisplay;&#10;        }&#10;        &#10;        isInitialized = true;&#10;    }&#10;    &#10;    private GameObject CreateSimpleSlot(int index)&#10;    {&#10;        GameObject slotObject = new GameObject($&quot;Slot_{index}&quot;);&#10;        slotObject.transform.SetParent(slotsParent);&#10;        &#10;        // Добавляем Image компонент для фона слота&#10;        Image slotBackground = slotObject.AddComponent&lt;Image&gt;();&#10;        slotBackground.color = new Color(0.2f, 0.2f, 0.2f, 0.8f);&#10;        &#10;        // Создаем дочерний объект для иконки предмета&#10;        GameObject iconObject = new GameObject(&quot;Icon&quot;);&#10;        iconObject.transform.SetParent(slotObject.transform);&#10;        Image iconImage = iconObject.AddComponent&lt;Image&gt;();&#10;        &#10;        // Создаем дочерний объект для текста количества&#10;        GameObject textObject = new GameObject(&quot;Quantity&quot;);&#10;        textObject.transform.SetParent(slotObject.transform);&#10;        &#10;        return slotObject;&#10;    }&#10;    &#10;    private void UpdateUI(InventorySlot[] slots)&#10;    {&#10;        RefreshInventory();&#10;    }&#10;    &#10;    public void RefreshInventory()&#10;    {&#10;        if (!isInitialized || inventory == null) return;&#10;        &#10;        InventorySlot[] slots = inventory.GetSlots();&#10;        &#10;        for (int i = 0; i &lt; itemDisplays.Length &amp;&amp; i &lt; slots.Length; i++)&#10;        {&#10;            if (itemDisplays[i] != null)&#10;            {&#10;                itemDisplays[i].UpdateDisplay(slots[i]);&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void UseItem(int slotIndex)&#10;    {&#10;        if (inventory != null &amp;&amp; petStats != null)&#10;        {&#10;            bool success = inventory.UseItem(slotIndex, petStats);&#10;            if (success)&#10;            {&#10;                Debug.Log($&quot;Предмет из слота {slotIndex} использован!&quot;);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            Debug.LogError(&quot;Inventory или PetStats не назначены!&quot;);&#10;        }&#10;    }&#10;    &#10;    public void OpenInventory()&#10;    {&#10;        gameObject.SetActive(true);&#10;        RefreshInventory();&#10;    }&#10;    &#10;    public void CloseInventory()&#10;    {&#10;        gameObject.SetActive(false);&#10;    }&#10;    &#10;    public void ToggleInventory()&#10;    {&#10;        if (gameObject.activeInHierarchy)&#10;        {&#10;            CloseInventory();&#10;        }&#10;        else&#10;        {&#10;            OpenInventory();&#10;        }&#10;    }&#10;    &#10;    // Публичные методы для добавления предметов (например, для системы магазина или подбора предметов)&#10;    public bool AddItem(Item item, int quantity = 1)&#10;    {&#10;        if (inventory != null)&#10;        {&#10;            return inventory.AddItem(item, quantity);&#10;        }&#10;        return false;&#10;    }&#10;    &#10;    public int GetItemCount(Item item)&#10;    {&#10;        if (inventory != null)&#10;        {&#10;            return inventory.GetItemCount(item);&#10;        }&#10;        return 0;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Projects/Item.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/Item.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;[System.Serializable]&#10;public enum ItemType&#10;{&#10;    Food,&#10;    Drink,&#10;    Toy,&#10;    Medicine,&#10;    Cleaning&#10;}&#10;&#10;[CreateAssetMenu(fileName = &quot;New Item&quot;, menuName = &quot;Inventory/Item&quot;)]&#10;public class Item : ScriptableObject&#10;{&#10;    [Header(&quot;Basic Info&quot;)]&#10;    public string itemName;&#10;    [TextArea(2, 5)]&#10;    public string description;&#10;    public Sprite icon;&#10;    public ItemType itemType;&#10;    &#10;    [Header(&quot;Stats&quot;)]&#10;    public int hungerRestore = 0;&#10;    public int thirstRestore = 0;&#10;    public int cleanlinessRestore = 0;&#10;    public int energyRestore = 0;&#10;    &#10;    [Header(&quot;Item Properties&quot;)]&#10;    public bool isStackable = true;&#10;    public int maxStackSize = 99;&#10;    public int value = 1;&#10;    &#10;    public virtual void UseItem(PetStats petStats)&#10;    {&#10;        if (petStats != null)&#10;        {&#10;            petStats.ModifyStats(hungerRestore, thirstRestore, cleanlinessRestore, energyRestore);&#10;            Debug.Log($&quot;Used {itemName}. Stats modified.&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Projects/ItemDisplay.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/ItemDisplay.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.UI;&#10;using TMPro;&#10;using UnityEngine.EventSystems;&#10;&#10;public class ItemDisplay : MonoBehaviour, IPointerClickHandler, IPointerEnterHandler, IPointerExitHandler&#10;{&#10;    [Header(&quot;UI References&quot;)]&#10;    [SerializeField] private Image itemIcon;&#10;    [SerializeField] private TextMeshProUGUI quantityText;&#10;    [SerializeField] private GameObject tooltip;&#10;    [SerializeField] private TextMeshProUGUI tooltipTitle;&#10;    [SerializeField] private TextMeshProUGUI tooltipDescription;&#10;    [SerializeField] private Button useButton;&#10;    &#10;    [Header(&quot;Visual Settings&quot;)]&#10;    [SerializeField] private Color emptySlotColor = Color.gray;&#10;    [SerializeField] private Color normalSlotColor = Color.white;&#10;    &#10;    private InventorySlot currentSlot;&#10;    private int slotIndex;&#10;    private InventoryUI inventoryUI;&#10;    &#10;    private void Awake()&#10;    {&#10;        if (useButton != null)&#10;        {&#10;            useButton.onClick.AddListener(UseItem);&#10;        }&#10;        &#10;        if (tooltip != null)&#10;        {&#10;            tooltip.SetActive(false);&#10;        }&#10;    }&#10;    &#10;    public void Initialize(InventoryUI inventory, int index)&#10;    {&#10;        inventoryUI = inventory;&#10;        slotIndex = index;&#10;    }&#10;    &#10;    public void UpdateDisplay(InventorySlot slot)&#10;    {&#10;        currentSlot = slot;&#10;        &#10;        if (slot == null || slot.IsEmpty())&#10;        {&#10;            // Пустой слот&#10;            itemIcon.sprite = null;&#10;            itemIcon.color = emptySlotColor;&#10;            quantityText.text = &quot;&quot;;&#10;            &#10;            if (useButton != null)&#10;                useButton.interactable = false;&#10;        }&#10;        else&#10;        {&#10;            // Заполненный слот&#10;            itemIcon.sprite = slot.item.icon;&#10;            itemIcon.color = normalSlotColor;&#10;            &#10;            if (slot.quantity &gt; 1)&#10;            {&#10;                quantityText.text = slot.quantity.ToString();&#10;            }&#10;            else&#10;            {&#10;                quantityText.text = &quot;&quot;;&#10;            }&#10;            &#10;            if (useButton != null)&#10;                useButton.interactable = true;&#10;        }&#10;    }&#10;    &#10;    public void OnPointerClick(PointerEventData eventData)&#10;    {&#10;        if (currentSlot != null &amp;&amp; !currentSlot.IsEmpty())&#10;        {&#10;            if (eventData.button == PointerEventData.InputButton.Left)&#10;            {&#10;                // Левый клик - использовать предмет&#10;                UseItem();&#10;            }&#10;            else if (eventData.button == PointerEventData.InputButton.Right)&#10;            {&#10;                // Правый клик - показать контекстное меню или дополнительную информацию&#10;                ShowItemInfo();&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void OnPointerEnter(PointerEventData eventData)&#10;    {&#10;        if (currentSlot != null &amp;&amp; !currentSlot.IsEmpty() &amp;&amp; tooltip != null)&#10;        {&#10;            ShowTooltip();&#10;        }&#10;    }&#10;    &#10;    public void OnPointerExit(PointerEventData eventData)&#10;    {&#10;        if (tooltip != null)&#10;        {&#10;            tooltip.SetActive(false);&#10;        }&#10;    }&#10;    &#10;    private void UseItem()&#10;    {&#10;        if (inventoryUI != null &amp;&amp; currentSlot != null &amp;&amp; !currentSlot.IsEmpty())&#10;        {&#10;            inventoryUI.UseItem(slotIndex);&#10;        }&#10;    }&#10;    &#10;    private void ShowTooltip()&#10;    {&#10;        if (tooltip != null &amp;&amp; currentSlot != null &amp;&amp; currentSlot.item != null)&#10;        {&#10;            tooltip.SetActive(true);&#10;            &#10;            if (tooltipTitle != null)&#10;                tooltipTitle.text = currentSlot.item.itemName;&#10;            &#10;            if (tooltipDescription != null)&#10;            {&#10;                string description = currentSlot.item.description;&#10;                &#10;                // Добавляем информацию о восстановлении статов&#10;                if (currentSlot.item.hungerRestore &gt; 0)&#10;                    description += $&quot;\n+{currentSlot.item.hungerRestore} Голод&quot;;&#10;                if (currentSlot.item.thirstRestore &gt; 0)&#10;                    description += $&quot;\n+{currentSlot.item.thirstRestore} Жажда&quot;;&#10;                if (currentSlot.item.cleanlinessRestore &gt; 0)&#10;                    description += $&quot;\n+{currentSlot.item.cleanlinessRestore} Чистота&quot;;&#10;                if (currentSlot.item.energyRestore &gt; 0)&#10;                    description += $&quot;\n+{currentSlot.item.energyRestore} Энергия&quot;;&#10;                &#10;                tooltipDescription.text = description;&#10;            }&#10;        }&#10;    }&#10;    &#10;    private void ShowItemInfo()&#10;    {&#10;        if (currentSlot != null &amp;&amp; currentSlot.item != null)&#10;        {&#10;            Debug.Log($&quot;Предмет: {currentSlot.item.itemName}\nОписание: {currentSlot.item.description}\nКоличество: {currentSlot.quantity}&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Projects/PetStats.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/PetStats.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;[System.Serializable]&#10;public class PetStats : MonoBehaviour&#10;{&#10;    [Range(0, 100)] public float Hunger = 100f;&#10;    [Range(0, 100)] public float Thirst = 100f;&#10;    [Range(0, 100)] public float Cleanliness = 100f;&#10;    [Range(0, 100)] public float Sleep = 100f;&#10;&#10;    public float HungerDecayRate = 0.5f;&#10;    public float ThirstDecayRate = 0.7f;&#10;    public float CleanlinessDecayRate = 0.3f;&#10;    public float SleepDecayRate = 0.4f;&#10;&#10;    private TimeManager _timeManager;&#10;&#10;    public void Initialize(TimeManager timeManager)&#10;    {&#10;        _timeManager = timeManager;&#10;        Debug.Log(&quot;PetStats initialized with TimeManager.&quot;);&#10;    }&#10;    private void Start()&#10;    {&#10;        if (_timeManager != null)&#10;        {&#10;            float elapsedTime = _timeManager.GetTimeSinceLastLogin();&#10;            if (elapsedTime &gt; 0)&#10;            {&#10;                DecreaseStatsOverTime(elapsedTime);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void Update()&#10;    {&#10;        float deltaTime = Time.deltaTime;&#10;        Hunger = Mathf.Max(0, Hunger - deltaTime * HungerDecayRate);&#10;        Thirst = Mathf.Max(0, Thirst - deltaTime * ThirstDecayRate);&#10;        Cleanliness = Mathf.Max(0, Cleanliness - deltaTime * CleanlinessDecayRate);&#10;        Sleep = Mathf.Max(0, Sleep - deltaTime * SleepDecayRate);&#10;    }&#10;&#10;    public void Feed(float amount)&#10;    {&#10;        Hunger = Mathf.Min(100, Hunger + amount);&#10;    }&#10;&#10;    public void Drink(float amount)&#10;    {&#10;        Thirst = Mathf.Min(100, Thirst + amount);&#10;    }&#10;&#10;    public void Clean(float amount)&#10;    {&#10;        Cleanliness = Mathf.Min(100, Cleanliness + amount);&#10;    }&#10;&#10;    public void Rest(float amount)&#10;    {&#10;        Sleep = Mathf.Min(100, Sleep + amount);&#10;    }&#10;&#10;    private void DecreaseStatsOverTime(float elapsedTime)&#10;    {&#10;        Hunger = Mathf.Max(0, Hunger - elapsedTime * HungerDecayRate);&#10;        Thirst = Mathf.Max(0, Thirst - elapsedTime * ThirstDecayRate);&#10;        Cleanliness = Mathf.Max(0, Cleanliness - elapsedTime * CleanlinessDecayRate);&#10;        Sleep = Mathf.Max(0, Sleep - elapsedTime * SleepDecayRate);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;[System.Serializable]&#10;public class PetStats : MonoBehaviour&#10;{&#10;    [Range(0, 100)] public float Hunger = 100f;&#10;    [Range(0, 100)] public float Thirst = 100f;&#10;    [Range(0, 100)] public float Cleanliness = 100f;&#10;    [Range(0, 100)] public float Sleep = 100f;&#10;&#10;    public float HungerDecayRate = 0.5f;&#10;    public float ThirstDecayRate = 0.7f;&#10;    public float CleanlinessDecayRate = 0.3f;&#10;    public float SleepDecayRate = 0.4f;&#10;&#10;    private TimeManager _timeManager;&#10;&#10;    public void Initialize(TimeManager timeManager)&#10;    {&#10;        _timeManager = timeManager;&#10;        Debug.Log(&quot;PetStats initialized with TimeManager.&quot;);&#10;    }&#10;    private void Start()&#10;    {&#10;        if (_timeManager != null)&#10;        {&#10;            float elapsedTime = _timeManager.GetTimeSinceLastLogin();&#10;            if (elapsedTime &gt; 0)&#10;            {&#10;                DecreaseStatsOverTime(elapsedTime);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void Update()&#10;    {&#10;        float deltaTime = Time.deltaTime;&#10;        Hunger = Mathf.Max(0, Hunger - deltaTime * HungerDecayRate);&#10;        Thirst = Mathf.Max(0, Thirst - deltaTime * ThirstDecayRate);&#10;        Cleanliness = Mathf.Max(0, Cleanliness - deltaTime * CleanlinessDecayRate);&#10;        Sleep = Mathf.Max(0, Sleep - deltaTime * SleepDecayRate);&#10;    }&#10;&#10;    public void Feed(float amount)&#10;    {&#10;        Hunger = Mathf.Min(100, Hunger + amount);&#10;    }&#10;&#10;    public void Drink(float amount)&#10;    {&#10;        Thirst = Mathf.Min(100, Thirst + amount);&#10;    }&#10;&#10;    public void Clean(float amount)&#10;    {&#10;        Cleanliness = Mathf.Min(100, Cleanliness + amount);&#10;    }&#10;&#10;    public void Rest(float amount)&#10;    {&#10;        Sleep = Mathf.Min(100, Sleep + amount);&#10;    }&#10;&#10;    public void ModifyStats(int hungerRestore, int thirstRestore, int cleanlinessRestore, int energyRestore)&#10;    {&#10;        if (hungerRestore &gt; 0) Feed(hungerRestore);&#10;        if (thirstRestore &gt; 0) Drink(thirstRestore);&#10;        if (cleanlinessRestore &gt; 0) Clean(cleanlinessRestore);&#10;        if (energyRestore &gt; 0) Rest(energyRestore);&#10;        &#10;        Debug.Log($&quot;Stats modified: Hunger +{hungerRestore}, Thirst +{thirstRestore}, Cleanliness +{cleanlinessRestore}, Energy +{energyRestore}&quot;);&#10;    }&#10;&#10;    private void DecreaseStatsOverTime(float elapsedTime)&#10;    {&#10;        Hunger = Mathf.Max(0, Hunger - elapsedTime * HungerDecayRate);&#10;        Thirst = Mathf.Max(0, Thirst - elapsedTime * ThirstDecayRate);&#10;        Cleanliness = Mathf.Max(0, Cleanliness - elapsedTime * CleanlinessDecayRate);&#10;        Sleep = Mathf.Max(0, Sleep - elapsedTime * SleepDecayRate);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Projects/TimeManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Projects/TimeManager.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using System;&#10;&#10;public class TimeManager : MonoBehaviour&#10;{&#10;    private const string LastLoginKey = &quot;LastLoginTime&quot;;&#10;&#10;    public void SaveLastLoginTime()&#10;    {&#10;        DateTime now = DateTime.Now;&#10;        PlayerPrefs.SetString(LastLoginKey, now.ToString());&#10;        PlayerPrefs.Save();&#10;    }&#10;&#10;    public float GetTimeSinceLastLogin()&#10;    {&#10;        if (PlayerPrefs.HasKey(LastLoginKey))&#10;        {&#10;            string lastLoginString = PlayerPrefs.GetString(LastLoginKey);&#10;            if (DateTime.TryParse(lastLoginString, out DateTime lastLoginTime))&#10;            {&#10;                TimeSpan timeSinceLastLogin = DateTime.Now - lastLoginTime;&#10;                return (float)timeSinceLastLogin.TotalSeconds;&#10;            }&#10;        }&#10;&#10;        // If no last login time is found, return -1 to indicate first login&#10;        return -1f;&#10;    }&#10;&#10;    private void OnApplicationQuit()&#10;    {&#10;        SaveLastLoginTime();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>