using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System.Collections;
using TMPro;

namespace Projects.Games.Garden
{
    public class GardenEndGameScreen : MonoBehaviour
    {
        [Header("UI Elements")]
        [SerializeField] private TextMeshProUGUI finalScoreText;
        [SerializeField] private TextMeshProUGUI moneyEarnedText;
        [SerializeField] private TextMeshProUGUI congratulationsText;
        [SerializeField] private Button restartButton;
        [SerializeField] private Button mainMenuButton;
        [SerializeField] private GameObject endGamePanel;
        
        [Header("Animation Settings")]
        [SerializeField] private float animationDuration = 1f;
        [SerializeField] private AnimationCurve scaleCurve = AnimationCurve.EaseInOut(0, 0, 1, 1);
        
        [Header("Scene Names")]
        [SerializeField] private string mainMenuSceneName = "Main";
        [SerializeField] private string gardenGameSceneName = "GardenGame";
        
        [Header("Audio")]
        [SerializeField] private AudioSource victorySound;
        
        private GardenGameController gameController;
        
        private void Awake()
        {
            gameController = FindFirstObjectByType<GardenGameController>();
        }
        
        private void Start()
        {
            SetupButtons();
            
          
        }
        
        private void SetupButtons()
        {
            if (restartButton != null)
            {
                restartButton.onClick.AddListener(RestartGame);
            }
            
            if (mainMenuButton != null)
            {
                mainMenuButton.onClick.AddListener(GoToMainMenu);
            }
        }
        
        public void ShowResults(int finalScore, int moneyEarned)
        {
            gameObject.SetActive(true);
            StartCoroutine(ShowResultsAnimated(finalScore, moneyEarned));
        }
        
        private IEnumerator ShowResultsAnimated(int finalScore, int moneyEarned)
        {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å
            // if (endGamePanel != null)
            //     endGamePanel.SetActive(true);
            Debug.Log(gameObject.activeSelf);
            // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –ø–æ–±–µ–¥—ã
            if (victorySound != null)
                victorySound.Play();
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
            yield return StartCoroutine(AnimatePanel());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            UpdateResultsText(finalScore, moneyEarned);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—á–∫–æ–≤
            yield return StartCoroutine(AnimateScore(finalScore));
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–µ–Ω–µ–≥
            yield return StartCoroutine(AnimateMoney(moneyEarned));
        }
        
        private IEnumerator AnimatePanel()
        {
            if (endGamePanel == null) yield break;
            Debug.Log(gameObject.activeSelf);
            Transform panelTransform = endGamePanel.transform;
            Vector3 originalScale = panelTransform.localScale;
            float elapsed = 0f;
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª–µ–≤–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
            panelTransform.localScale = Vector3.zero;
            
            while (elapsed < animationDuration)
            {
                elapsed += Time.deltaTime;
                float progress = elapsed / animationDuration;
                
                float scaleMultiplier = scaleCurve.Evaluate(progress);
                panelTransform.localScale = originalScale * scaleMultiplier;
                
                yield return null;
            }
            
            panelTransform.localScale = originalScale;
            Debug.Log(gameObject.activeSelf);
        }
        
        private void UpdateResultsText(int finalScore, int moneyEarned)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
            if (congratulationsText != null)
            {
                string message = GetCongratulationsMessage(finalScore);
                congratulationsText.text = message;
            }
            
            // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (finalScoreText != null)
                finalScoreText.text = "Score: 0";
                
            if (moneyEarnedText != null)
                moneyEarnedText.text = "Earned: 0 <sprite index=2>";
        }
        
        private IEnumerator AnimateScore(int targetScore)
        {
            if (finalScoreText == null) yield break;
            
            float duration = 1f;
            float elapsed = 0f;
            int currentScore = 0;
            
            while (elapsed < duration)
            {
                elapsed += Time.deltaTime;
                float progress = elapsed / duration;
                
                currentScore = Mathf.RoundToInt(Mathf.Lerp(0, targetScore, progress));
                finalScoreText.text = $"Score: {currentScore}";
                
                yield return null;
            }
            
            finalScoreText.text = $"Score: {targetScore}";
        }
        
        private IEnumerator AnimateMoney(int targetMoney)
        {
            if (moneyEarnedText == null) yield break;
            
            float duration = 1f;
            float elapsed = 0f;
            int currentMoney = 0;
            
            while (elapsed < duration)
            {
                elapsed += Time.deltaTime;
                float progress = elapsed / duration;
                
                currentMoney = Mathf.RoundToInt(Mathf.Lerp(0, targetMoney, progress));
                moneyEarnedText.text = $"Earned: {currentMoney} <sprite index=2>";
                
                yield return null;
            }
            
            moneyEarnedText.text = $"Earned: {targetMoney} <sprite index=2>";
        }
        
        private string GetCongratulationsMessage(int score)
        {
            if (score >= 500)
                return "üåü –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã —Å–∞–¥–æ–≤–æ–¥-–º–∞—Å—Ç–µ—Ä! üåü";
            else if (score >= 300)
                return "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ";
            else if (score >= 150)
                return "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üëç";
            else if (score >= 50)
                return "üå± –ù–µ–ø–ª–æ—Ö–æ –¥–ª—è –Ω–∞—á–∞–ª–∞! üå±";
            else
                return "üåø –¢—Ä–µ–Ω–∏—Ä—É–π—Å—è –±–æ–ª—å—à–µ! üåø";
        }
        
        private void RestartGame()
        {
            if (gameController != null)
            {
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
                gameController.RestartGame();
            }
            else
            {
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É –∏–≥—Ä—ã
                SceneManager.LoadScene(gardenGameSceneName);
            }
        }
        
        private void GoToMainMenu()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞
            if (Application.CanStreamedLevelBeLoaded(mainMenuSceneName))
            {
                SceneManager.LoadScene(mainMenuSceneName);
            }
            else
            {
                // –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É
                SceneManager.LoadScene(1);
            }
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ UI
        public void OnRestartButtonClicked()
        {
            RestartGame();
        }
        
        public void OnMainMenuButtonClicked()
        {
            GoToMainMenu();
        }
        
        private void OnDestroy()
        {
            if (restartButton != null)
                restartButton.onClick.RemoveAllListeners();
                
            if (mainMenuButton != null)
                mainMenuButton.onClick.RemoveAllListeners();
        }
    }
}
